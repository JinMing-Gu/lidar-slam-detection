.build_template:
  stage: build
  before_script:
    - python -c 'import tests.system as sys; sys.stop_sys()'
    - pip uninstall -y sensor_driver_wrapper || true
    - pip uninstall -y freespace_wrapper || true
    - pip uninstall -y slam_wrapper || true
    - pip uninstall -y perception || true
    - ./tools/scripts/install_dependency.sh

.test_template:
  stage: test
  script:
    - python tests/main.py
  artifacts:
    name: logs
    when: always
    expire_in: 2 week
    reports:
      junit: report.xml
    paths:
      - output/

# commit
.commit_build_template:
  extends: .build_template
  script:
    - ./tools/build/build_module.sh
  rules:
    - if: '$BUILD_RUNNER=="commit_runner"'

.commit_test_template:
  extends: .test_template
  rules:
    - if: '$BUILD_RUNNER=="commit_runner"'

# release
.release_build_template:
  extends: .build_template
  script:
    - echo "${TestVersion}"
  rules:
    - if: '$DailyBuild=="False"'

.release_upgrade_template:
  stage: upgrade
  script:
    - python -c 'import tests.system as sys; sys.upgrade()'
  rules:
    - if: '$DailyBuild=="False"'

.release_test_template:
  extends: .test_template
  rules:
    - if: '$DailyBuild=="False"'
  allow_failure: true

# daily build
.daily_build_template:
  extends: .build_template
  script:
    - ./tools/build/build_release.sh "${releaseNote}"
  rules:
    - if: '$DailyBuild=="True"'
  artifacts:
    name: firmware
    paths:
      - firmware/
  timeout: 2h

.daily_upgrade_template:
  stage: upgrade
  script:
    - python -c 'import tests.system as sys; sys.upgrade()'
  rules:
    - if: '$DailyBuild=="True"'
  dependencies: []

.daily_test_template:
  extends: .test_template
  rules:
    - if: '$DailyBuild=="True"'
  allow_failure: true
  dependencies: []

# version test
.version_build_template:
  extends: .build_template
  script:
    - ./tools/build/build_release.sh "${releaseNote}"
  rules:
    - if: '$build=="release"'
  artifacts:
    name: firmware
    paths:
      - firmware/
  timeout: 2h

.version_upgrade_template:
  stage: upgrade
  script:
    - python -c 'import tests.system as sys; sys.upgrade()'
  rules:
    - if: '$build=="release"'
  dependencies: []

.version_test_template:
  extends: .test_template
  rules:
    - if: '$build=="release"'
  dependencies: []
  allow_failure: true

.version_deploy_template:
  stage: deploy
  script:
    - mv ../release/*.bin ./
    - sshpass -p "526390906Ww@" scp *.bin ftp@10.10.80.28:/home/ftp/detection_sys/tsari_ad_ipu/
  rules:
    - if: '$build=="release"'
  dependencies: []
